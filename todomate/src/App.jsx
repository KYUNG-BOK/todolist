import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import { useTodos } from './hooks/useTodos'; // Ïª§Ïä§ÌÖÄ ÌõÖ ÏÇ¨Ïö©
import TodoEditModal from './component/TodoEditModal';

const quotes = [
  "The only way to do great work is to love what you do",
  "Developers are problem solvers and discoverers.",
  "Start now. There is no perfect time.",
  "Good code is worth more than good documentation.",
  "Solving difficult problems is an opportunity to test a developer's creativity and perseverance.",
  "Failure is the starting point of learning."
];

const App = () => {
  const { todos, addTodo, deleteTodo, toggleTodo, updateTodo } = useTodos();
  const [input, setInput] = useState('');
  const [time, setTime] = useState(new Date());
  const inputRef = useRef();
  const [quote, setQuote] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [editText, setEditText] = useState('');
  const [editingTodo, setEditingTodo] = useState(null);  // ÏàòÏ†ï ÎåÄÏÉÅ ÏÑ†Î≥ÑÌïòÍ∏∞
  const [filter, setFilter] = useState('all');

  // ÏãúÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  // Î™ÖÏñ∏ Ï¥àÍ∏∞ ÏÑ§Ï†ï
  useEffect(() => {
    setQuote(quotes[Math.floor(Math.random() * quotes.length)]);
  }, []);

  // Ï∂îÍ∞Ä
  const handleAddTodo = () => {
    if (input.trim() === '') return;
    addTodo(input);
    setInput('');
    inputRef.current?.focus();
  };

  // ÏàòÏ†ï ÏãúÏûë
  const startEdit = (todo) => {
    setEditingId(todo.id);
    setEditText(todo.text);
  };

  // ÏàòÏ†ï Ï†ÄÏû•
  const handleUpdate = (newText) => {
    if (!editingTodo) return;
      updateTodo(editingTodo.id, newText);
      setEditingTodo(null); // Î™®Îã¨ Îã´Í∏∞
  };

  // ÏàòÏ†ïÎ≤ÑÌäº ÌÅ¥Î¶≠ÌñàÏùÑÎïå Î™®Îã¨ Ïò§Ìîà
  const handleEditClick = (todo) => {
    setEditingTodo(todo); // Î™®Îã¨ Ïó¥Í∏∞
  };

  // Î™®Îã¨ ÎÇ¥ Ï∑®ÏÜåÎ≤ÑÌäº
  const handleCancelEdit = () => {
    setEditingTodo(null); // Î™®Îã¨ Îã´Í∏∞
  };

  // ÌïÑÌÑ∞ÎßÅ
  const filteredTodos = todos.filter(todo => {
  if (filter === 'all') return true;
  if (filter === 'active') return !todo.done;
  if (filter === 'completed') return todo.done;
  });

  return (
    <div className="app">
      <h1>My TodoList</h1>
      <div className="clock">{time.toLocaleTimeString()}</div>
      <blockquote className="quote">üí¨ {quote}</blockquote>

      <div className="input-group">
        <input
          ref={inputRef}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Ïò§ÎäòÏùò Ìï¥Ïïº Ìï†Ïùº!"
        />
        <button className="add" onClick={handleAddTodo}>Ï∂îÍ∞Ä</button>
      </div>

      <ul className="todo-list">
        {filteredTodos.map(todo => (
          <li key={todo.id} className={todo.done ? 'done' : ''}>
            {editingId === todo.id ? (
              <>
                <input
                  value={editText}
                  onChange={(e) => setEditText(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') handleUpdate(todo.id);
                  }}
                />
                <button className="modify_save" 
                        onClick={() => handleUpdate(todo.id)}>
                          Ï†ÄÏû•
                  </button>
                <button className="noadd" 
                        onClick={() => setEditingId(null)}>
                          Ï∑®ÏÜå
                  </button>
              </>
            ) : (
              <>
                <span onClick={() => toggleTodo(todo.id)}>{todo.text}</span>
                <div>
                  <button className="modify" 
                          onClick={() => handleEditClick(todo)}>
                            ÏàòÏ†ï
                    </button>
                  <button className="delete" 
                          onClick={() => deleteTodo(todo.id)}>
                            ÏÇ≠Ï†ú
                    </button>
                </div>
              </>
            )}
          </li>
        ))}
      </ul>
        <div className="filter-buttons">
          <button onClick={() => setFilter('all')} 
                  className={filter === 'all' ? 'active' : ''}>
                    Ï†ÑÏ≤¥
                  </button>
          <button onClick={() => setFilter('active')} 
                  className={filter === 'active' ? 'active' : ''}>
                    ÎØ∏ÏôÑÎ£å
                  </button>
          <button onClick={() => setFilter('completed')} 
                  className={filter === 'completed' ? 'active' : ''}>
                    ÏôÑÎ£å
                  </button>
      </div>

       {/* ÏàòÏ†ï Î™®Îã¨ ÎùÑÏö∞Í∏∞ */}
      {editingTodo && (
        <TodoEditModal
          initialText={editingTodo.text}
          onConfirm={handleUpdate}
          onCancel={handleCancelEdit}
        />
      )}

    </div>
  );
};

export default App;
